<html>
	<head>
		<title>SuMPF: Installation</title>
		<link rel="stylesheet" type="text/css" href="style.css" />
		<script type="text/javascript">
			dont_go_back = true;	// This is needed for the header script at the beginning of the body tag
		</script>
	</head>
	<body>
		<script src="header.js" type="text/javascript"></script>
		<table class='maintable'>
			<tr>
				<th colspan="3" class="headline">Installation</th>
			</tr>
			<tr>
				<td colspan="2" class="text">
					SuMPF can be downloaded from its <a href="https://github.com/JonasSC/SuMPF">GitHub project page</a>.<br />
					For most applications it is advised to download a more bleeding
					edge version of SuMPF, than the one from the "master" branch,
					since they might contain important bugfixes.
					An overview of the different project branches can be found
					<a href="developers.htm#gitbranches">here</a>.<br />
					<br />
					The easiest way to install SuMPF is probably by using the
					Makefile.<br />
					For those, who prefer the pure Python way, the setup.py file
					can be found in the "source" folder.<br />
					Currently there is no readymade package for a Linux distribution
					available. But a package at least for Debian is in the ToDo-list.
				</td>
				<td class="overview">
					<ul>
						<li><nobr><a href="#Makefile">Makefile</a></nobr></li>
						<li><nobr><a href="#External">External libraries</a></nobr></li>
						<li><nobr><a href="#OS">Operating System support</a></nobr></li>
					</ul>
				</td>
			</tr>
			<tr>
				<th colspan="3" class="section">
					<a name="Makefile">Makefile</a>
					<a href="#top" class="toplink">Top&uarr;</a>
				</th>
			</tr>
			<tr>
				<td colspan="3" class="text">
					To install SuMPF, a Makefile is provided.<br />
					This makefile contains some additional targets, for other
					purposes than installing SuMPF. All these targets are listed
					below.
				</td>
			</tr>
			<tr>
				<td class="subsection">install</td>
				<td colspan="2" class="text">
					"make install" installs the python module for SuMPF on the
					system.<br />
					It uses Python's distutils for that purpose. The setup.py
					file is in the ./source folder.
				</td>
			</tr>
			<tr>
				<td class="subsection">install_user</td>
				<td colspan="2" class="text">
					"make install_user" installs the python module for SuMPF for
					the current user.<br />
					It uses Python's distutils for that purpose. The setup.py
					file is in the ./source folder. The installation will be run
					with the parameter "--user"<br />
					The module will most likely be somewhere in ~/.local/lib/python...
				</td>
			</tr>
			<tr>
				<td class="subsection">clean</td>
				<td colspan="2" class="text">
					"make clean" deletes the python bytecode by removing the *.pyc
					files and __pycache__ directories from the source, the test
					and the tools directories.
				</td>
			</tr>
			<tr>
				<td class="subsection">mrproper</td>
				<td colspan="2" class="text">
					"make mrproper" deletes the Python bytecode just like "make
					clean", but also deletes the automatically generated documentation.
				</td>
			</tr>
			<tr>
				<td class="subsection">install_examples</td>
				<td colspan="2" class="text">
					"make install_examples" installs the examples of SuMPF as
					executable programs on the system.<br />
					The programs can be run with the command sumpf_NAME, where
					NAME is the name of the example function.<br />
					SuMPF needs to be installed before this make target can be run.
				</td>
			</tr>
			<tr>
				<td class="subsection">install_examples_local</td>
				<td colspan="2" class="text">
					"make install_examples_local" installs the examples of SuMPF
					as executable programs in ./bin.<br />
					SuMPF needs to be installed before this make target can be run.
				</td>
			</tr>
			<tr>
				<td class="subsection">doc</td>
				<td colspan="2" class="text">
					"make doc" creates the documentation files for SuMPF that are
					created automatically.<br />
					The automatic documentation is created with doxygen (doxypy)
					and ModuleDoc (in the ./tools folder) from the source code
					in the ./source folder.<br />
					The whole documentation can be found in the ./documentation
					folder.
				</td>
			</tr>
			<tr>
				<th colspan="3" class="section">
					<a name="External">External libraries</a>
					<a href="#top" class="toplink">Top&uarr;</a>
				</th>
			</tr>
			<tr>
				<td colspan="3" class="text">
					Although SuMPF can be run without any external libraries, that
					are not part of a standard Python distribution, some of its
					features rely on additional libraries.<br />
					If one of these libraries cannot be imported, SuMPF hides the
					functionalities that rely on the respective library.<br />
					<br />
					The core functionalities of SuMPF like the connections, the
					config and some basic audio processing classes do not rely
					on libraries that are not part of a standard Python distribution.
				</td>
			</tr>
			<tr>
				<td class="subsection"><a href="http://numpy.scipy.org/">NumPy</a></td>
				<td colspan="2" class="text">
					NumPy is a very common library for Python. It provides many
					useful mathematical functions.<br />
					It is used by many audio processing classes. These classes
					will not be available when NumPy is missing.<br />
					Some core features such as the data classes for Signals and
					Spectrums use NumPy functions. To make these work, even when
					NumPy is missing, a set of replacement functions has been
					written. These functions are used only, when NumPy is not
					available. They are likely to run a lot slower than the
					original function from NumPy.
				</td>
			</tr>
			<tr>
				<td class="subsection"><a href="http://wxpython.org/">wxPython</a></td>
				<td colspan="2" class="text">
					wxPython is the Python version of the wxWidgets GUI toolkit.<br />
					SuMPF uses it for every GUI related stuff such as plotting or
					the GUIs for the examples.
				</td>
			</tr>
			<tr>
				<td class="subsection"><a href="http://matplotlib.sourceforge.net/">matplotlib</a></td>
				<td colspan="2" class="text">
					matplotlib is a plotting library for Python. It is used to
					render the plots in SuMPF.<br />
					matplotlib is only used for the rendering of the plots. The
					windows and controls for the plots are done with wxPython.
					So installing matplotlib without installing wxPython will not
					enhance the functionality of SuMPF.<br />
					matplotlib depends on NumPy.
				</td>
			</tr>
			<tr>
				<td class="subsection"><a href="http://sourceforge.net/projects/py-jack/">PyJack</a></td>
				<td colspan="2" class="text">
					PyJack is the Python interface to the JACK audio server. The
					JACK audio server is a zero latency server to route audio data
					between applications.<br />
					PyJack is currently the only way in SuMPF to playback and
					record audio data with the sound card.<br />
					PyJack depends on NumPy.<br />
					<br />
					PyJack is not as common as the above mentioned packages. So
					it might not be available through the common ways of installing
					python packages like apt, rpm, Cygwin or easy_install.<br />
					It is however easy to install with the instructions given in
					its README file.<br />
					You can add the "--user" option to the <nobr>"python setup.py
					install"</nobr> command to install it in your home directory.
					The module for PyJack can then most likely be found under
					"~/.local/lib/python...".
				</td>
			</tr>
			<tr>
				<td class="subsection">
					<a href="https://github.com/bastibe/PySoundFile">PySoundFile</a><br />
					<a href="http://www.ar.media.kyoto-u.ac.jp/members/david/softwares/audiolab/">scikits.audiolab</a>
				</td>
				<td colspan="2" class="text">
					PySoundFile and scikits.audiolab is a Python interfaces for
					the <a href="http://www.mega-nerd.com/libsndfile/">libsndfile</a>
					library. They provide functionality to read and write audio
					files in many different formats.<br />
					SuMPF uses them to read and write Signal files from and to
					common audio files such as wav, aiff and flac. It first checks
					for PySoundFile and if that is not available, it tries to
					fall back to scikits.audiolab.<br />
					Both PySoundFile and scikits.audiolab require NumPy to be
					installed.<br />
					<br />
					If scikits.audiolab cannot be installed through the operating
					system, it can be installed with easy_install.<br />
					Use <nobr>"(sudo )easy_install scikits.audiolab"</nobr> to install it for every
					user on the system. To install it in your home directory to
					somewhere like "~/.local/lib/python..." use the command
					<nobr>"easy_install --user scikits.audiolab"</nobr><br />
				</td>
			</tr>
			<tr>
				<td class="subsection"><a href="http://www.ar.media.kyoto-u.ac.jp/members/david/softwares/samplerate/">scikits.samplerate</a></td>
				<td colspan="2" class="text">
					scikits.samplerate is a Python interface for the
					<a href="http://www.mega-nerd.com/SRC/">libsamplerate</a>
					library, which is also known as "Secret Rabbit Code". With
					this library, the module ResampleSignal is available, which
					can be used to adjust the sampling rate of a Signal.<br />
					scikits.samplerate depends on NumPy.<br />
					<br />
					If scikits.samplerate cannot be installed through the operating
					system, it can be installed with easy_install.<br />
					Use <nobr>"(sudo )easy_install scikits.samplerate"</nobr>
					to install it for every user on the system. To install it in
					your home directory to somewhere like "~/.local/lib/python..."
					use the command <nobr>"easy_install --user scikits.samplerate"</nobr>
				</td>
			</tr>
			<tr>
				<td class="subsection"><a href="https://github.com/blink1073/oct2py">oct2py</a></td>
				<td colspan="2" class="text">
					oct2py is a bridge between Python and <a href="https://www.gnu.org/software/octave">GNU Octave</a>.
					It is used to read and write audio data to mat-files,
					so it is possible to excange such data with Octave and Python.
					It is also used to read files that have been created with the
					<a href="http://www.ita-toolbox.org">ITA-Toolbox</a>, a Matlab
					toolbox for processing audio data, which is developped at the
					Institute of Technical Acoustics, RWTH Aachen University.
					Currently, it is not possible to write those files with SuMPF.<br />
					<br />
					To make use of oct2py, it is of course also necessary to
					install GNU Octave.<br />
					<br />
					In the current Implementation, SuMPF closes oct2py's convenience
					instance, if it has not been created before reading or writing
					a file. This has the side effect, that the convenience instance
					has to be restarted before it is usable, when a file was read
					or written with oct2py, before oct2py had been imported anywhere
					else. Sadly this is necessary, because if the convenience instance
					were not closed, a probably unused process of Octave would
					remain active until the Python interpreter is closed.<br />
					<br />
					If oct2py cannot be installed through the operating system,
					it can be installed with easy_install.<br />
					Use <nobr>"(sudo )easy_install oct2py"</nobr>
					to install it for every user on the system. To install it in
					your home directory to somewhere like "~/.local/lib/python..."
					use the command <nobr>"easy_install --user oct2py"</nobr>
				</td>
			</tr>
			<tr>
				<td class="subsection"><a href="http://cython.org/">Cython</a></td>
				<td colspan="2" class="text">
					Cython is a tool for generating C code from Python source code
					and compile that with an optimizing compiler. It also adds
					an extension to the Python language that allows static typing
					of variables for further performance improvements.<br />
					Cython is used in SuMPF to speed up certain performance critical
					parts. Alongside with any Cython implementation in SuMPF, there
					is a pure Python implementation, so no functionality is lost,
					if Cython is not used.<br />
					<br />
					Currently the following parts of SuMPF are implemented in Cython:
					<ul>
						<li>The rendering algorithm of the ThieleSmallParameterAuralizationNonlinear class</li>
					</ul>
				</td>
			</tr>
			<tr>
				<th colspan="3" class="section">
					<a name="OS">Operating System support</a>
					<a href="#top" class="toplink">Top&uarr;</a>
				</th>
			</tr>
			<tr>
				<td class="subsection">GNU/Linux</td>
				<td colspan="3" class="text">
					SuMPF is being developed under Debian GNU/Linux. So far it
					has only been thoroughly tested there. But it is very likely
					that it runs on other GNU/Linux operating systems just as well
				</td>
			</tr>
			<tr>
				<td class="subsection">Other UNIX-based Systems</td>
				<td colspan="3" class="text">
					SuMPF itself does not use any operating system specific
					functions, even the libraries have been picked with portability
					in mind. So it should run on other operating systems like 
					the BSDs, Solaris or MacOS X. But so far, they are not tested.
				</td>
				</td>
			</tr>
			<tr>
				<td class="subsection">Windows</td>
				<td colspan="3" class="text">
					SuMPF has not been tested extensively on Windows, but some
					features have worked on a Windows XP machine with Python 2.7.
					They will most likely work with other windows versions as well.
					<br />
					The following stuff worked:
					<ul>
						<li>
							The normal unit tests without GUI, long tests, writing
							to disk or time variant tests. This covers most features
							except the file- and soundcard-IO, the noise generator
							and the GUI.
						</li>
						<li>
							Reading a wav-file. This means that interacting with
							audiolab worked, so that the other file-IO will most
							likely work aswell.
						</li>
						<li>
							Generating white noise. Although the noise generator
							has not been tested through a unit test on Windows,
							this suggests that it will work.
						</li>
					</ul>
					The following stuff did not work:
					<ul>
						<li>
							Showing a PlotWindow. This does not raise any error,
							it just hangs, probably forever. This can have something
							to do with the threading issues in SuMPF's GUI. On
							their own, both wx and matplotlib have worked.
						</li>
						<li>
							Loading the config from a file. This has not been tested,
							but currently it seems to be defective by design. SuMPF
							looks for a root config file at common UNIX paths,
							that are not valid on Windows. Derrived projects, that
							use SuMPF just as a library can set their own config
							paths and therefore avoid this problem, but standalone
							SuMPF can currently not be configured via a file on
							Windows.
						</li>
					</ul>
					Soundcard IO was not tested, although JACK seems to be available
					for Windows now.
				</td>
				</td>
			</tr>
			<tr>
				<td></td>
				<td width="100%"></td>
				<td></td>
			</tr>
		</table>
	</body>
</html>

