<html>
    <head>
        <title>ModuleDoc: sumpf.helper</title>
        <style type='text/css'>
            *{
                vertical-align: top;
            }
            *.maintable{
                width: 80%;
                margin-left: auto;
                margin-right: auto;
            }
            *.maintablecell{
                width: 25%;
                font-size: medium;
                background: #E0F0FF;
            }
            *.attribute{
            }
            *.attributes{
                font-size: larger;
                background: #6080FF;
            }
            *.modulepath{
                font-size: x-large;
                background: #6080FF;
            }
            *.moduledoc{
                font-size: medium;
                background: #E0F0FF;
            }
            *.headline{
                font-size: larger;
                background: #C8E0FF;
            }
            *.functiondoc{
                position: absolute;
                background-color: #C8E0FF;
                border-style: solid;
            }
        </style>
        <script type='text/javascript'>
            function Toggle(id){
                element = document.getElementById(id);
                if (element.style.display != 'none')
                    element.style.display = 'none';
                else{
                    HideFunctionDoc();
                    element.style.display = 'block';
                }
            }

            function HideFunctionDoc(){
                document.getElementById('differentiate_spline').style.display = 'none';
                document.getElementById('normalize_path').style.display = 'none';
                document.getElementById('walk_module').style.display = 'none';
                document.getElementById('counting_number').style.display = 'none';
                document.getElementById('differentiate_fft').style.display = 'none';
                document.getElementById('differentiate').style.display = 'none';
                document.getElementById('binomial_coefficient').style.display = 'none';
                document.getElementById('leading_zeros').style.display = 'none';
            }
        </script>
    </head>
    <body onLoad='HideFunctionDoc()'>
        <script src='../header.js' type='text/javascript'></script>
        <table class='maintable'>
            <tr>
                <td class='maintablecell modulepath'>Module</td>
                <th colspan='3' class='maintablecell modulepath'><a href='sumpf.htm'>sumpf</a>.<a href='sumpf.helper.htm'>helper</a></th>
            </tr>
            <tr>
                <td class='maintablecell headline'>Docstring</td>
                <td colspan='3' class='maintablecell moduledoc'>This name space contains some helper functions.<br />
These functions are not the core functionality of SuMPF, but they are useful<br />
inside SuMPF and maybe elsewhere as well.</td>
            </tr>
            <tr>
                <th colspan='4' class='maintablecell attributes'>Attributes</th>
            </tr>
            <tr>
                <th class='maintablecell headline'>Modules</th>
                <th class='maintablecell headline'>Classes</th>
                <th class='maintablecell headline'>Functions</th>
                <th class='maintablecell headline'>Variables</th>
            </tr>
            <tr>
                <td class='maintablecell'>
                    <div class='attribute'><a href='sumpf.helper.average.htm'>average</a></div>
                    <div class='attribute'><a href='sumpf.helper.numpydummy.htm'>numpydummy</a></div>
                </td>
                <td class='maintablecell'>
                    <div class='attribute'><a href=../doxygen/html/class__sumpf_1_1__helper_1_1multiinputdata_1_1MultiInputData.html>MultiInputData</a></div>
                </td>
                <td class='maintablecell'>
                    <div class='attribute'>
                        <a href='javascript:Toggle("binomial_coefficient")'>binomial_coefficient<a>
                        <div class='functiondoc hidden' id='binomial_coefficient'>This function calculates the binomial coefficient of n over k. This is the<br />
    number of choices to pick k items out of a set of n items.<br />
    @param n, k: two integers<br />
    @retval : the binomial coefficient as an integer</div>
                    </div>
                    <div class='attribute'>
                        <a href='javascript:Toggle("counting_number")'>counting_number<a>
                        <div class='functiondoc hidden' id='counting_number'>Creates a counting number string (e.g. "1st", "2nd", "3rd", "4th" ...) from<br />
    an integer number.<br />
    @param number: an integer number<br />
    @retval : a string</div>
                    </div>
                    <div class='attribute'>
                        <a href='javascript:Toggle("differentiate")'>differentiate<a>
                        <div class='functiondoc hidden' id='differentiate'>This function takes a sequence of numbers and calculates the derivative of it.<br />
    The length of the result is the same as the length of the input.<br />
    The result might have to be scaled by the time gap between the sequence's samples.<br />
<br />
    This function calculates the derivative by subtracting the previous sample<br />
    of the input sequence from the current sample. The first sample of the derivative<br />
    is calculated by subtracting the first input sample from the second.<br />
    This algorithm is fast and yields reasonably good results. Nevertheless, the<br />
    calculated values are actually the derivative values between the samples, which<br />
    means that the result is delayed by half the sampling time. Furthermore the<br />
    limited sampling rate causes the calculated derivative to show a bandpass<br />
    behavior rather than the expected high pass behavior. And the fact, that the<br />
    first sample of the result is calculated in a different way than the other<br />
    samples, is not exactly ideal.<br />
<br />
    The differentiate_fft function avoids the aforementioned drawbacks by calculating<br />
    the derivative in the frequency domain. However it causes ringing artifacts<br />
    at the beginning and at the end of the calculated derivative, that are especially<br />
    critical with short input sequences.<br />
    The differentiate_spline function avoids the half-sample delay of this simple<br />
    algorithm by interpolating the sequence with polynomials, but increasing the<br />
    degree of the polynomials causes the bandpass behavior to become worse.<br />
    Both these algorithms are only available, when the external library NumPy is<br />
    available as well.<br />
<br />
    @param sequence: a list of numbers<br />
    @retval : the derivative of the given list as a list of floats</div>
                    </div>
                    <div class='attribute'>
                        <a href='javascript:Toggle("differentiate_fft")'>differentiate_fft<a>
                        <div class='functiondoc hidden' id='differentiate_fft'>This function takes a sequence of numbers and calculates the derivative<br />
        of it. The length of the result is the same as the length of the input.<br />
        The result might have to be scaled by the time gap between the sequence's<br />
        samples.<br />
<br />
        This function calculates the derivative by transforming the input sequence<br />
        to the frequency domain, multiplying the resulting values with a factor<br />
        that is proportional to the frequency and then transforming the result<br />
        back to the original domain.<br />
        This avoids the bandpass behavior of the differentiate and the differentiate_spline<br />
        algorithms. However this algorithm causes ringing artifacts at the beginning<br />
        and at the end of the calculated derivative, that are especially critical<br />
        with short input sequences.<br />
<br />
        The differentiate_fft function is only available, when the external library<br />
        NumPy is available as well.<br />
<br />
        @param sequence: a list of numbers<br />
        @retval : the derivative of the given list as a list of floats</div>
                    </div>
                    <div class='attribute'>
                        <a href='javascript:Toggle("differentiate_spline")'>differentiate_spline<a>
                        <div class='functiondoc hidden' id='differentiate_spline'>This function takes a sequence of numbers and calculates the derivative of it.<br />
        The length of the result is the same as the length of the input.<br />
        The result might have to be scaled by the time gap between the sequence's<br />
        samples.<br />
<br />
        This function calculates the derivative by piecewise interpolation of the<br />
        input sequence with polynomials and calculating the derivative of these<br />
        polynomials. With a degree of 1, this function works exactly like the<br />
        standard differentiation algorithm.<br />
        This algorithm avoids delay of the standard differentiation algorithm<br />
        and the ringing artifacts of the differentiate_fft algorithm.<br />
        But with high degrees of the interpolation polynomials, the bandpass behavior,<br />
        that is also a drawback of the standard algorithm, becomes worse.<br />
<br />
        The differentiate_spline function is only available, when the external<br />
        library NumPy is available as well.<br />
<br />
        @param sequence: a list of numbers<br />
        @param degree: the degree of the interpolation polynomials<br />
        @retval : the derivative of the given list as a list of floats</div>
                    </div>
                    <div class='attribute'>
                        <a href='javascript:Toggle("leading_zeros")'>leading_zeros<a>
                        <div class='functiondoc hidden' id='leading_zeros'>This function creates a string from an integer number, that has as many digits<br />
    as the given maximum number. If the given integer has less digits than the<br />
    maximum number, zeros will be prepended to the string.<br />
    @param number: the integer number that shall be converted to a string<br />
    @param maximum: the integer number to whose number of digits the string shall be extended<br />
    @retval : a string from the given integer with the same number of digits as the given maximum</div>
                    </div>
                    <div class='attribute'>
                        <a href='javascript:Toggle("normalize_path")'>normalize_path<a>
                        <div class='functiondoc hidden' id='normalize_path'>normalizes a path by expanding all variables and home directories and then<br />
    converts it to an absolute path.<br />
    @param path: the path that shall be normalized as a string<br />
    @retval : the normalized path as a string</div>
                    </div>
                    <div class='attribute'>
                        <a href='javascript:Toggle("walk_module")'>walk_module<a>
                        <div class='functiondoc hidden' id='walk_module'>This function creates and returns a tree like list of attributes for a given<br />
    module in a similar manner to os.walk.<br />
    The result will be a list of tuples which hold the attributes of the given<br />
    module or one of its submodules. The tuple for the given module will be the<br />
    first element in the list.<br />
    Each tuple will have five elements:<br />
     0. path:       a list of modules that are the path to the current module.<br />
                    The given module will always be the first element in this<br />
                    list while the current module will be the last element.<br />
     1. modules:    a list of all modules which are in the current module<br />
     2. classes:    a list of all classes which are in the current module<br />
     3. functions:  a list of all functions which are in the current module<br />
     4. variables:  a list of all variable names which are in the current module<br />
    @param module: the module for which the list shall be created<br />
    @retval : a tree like list</div>
                    </div>
                </td>
                <td class='maintablecell'>
                </td>
            </tr>
        </table>
    </body>
</html>