<html>
	<head>
		<title>SuMPF: About</title>
		<link rel="stylesheet" type="text/css" href="style.css" />
		<script type="text/javascript">
			dont_go_back = true;	// This is needed for the header script at the beginning of the body tag
		</script>
	</head>
	<body>
		<script src="header.js" type="text/javascript"></script>
		<table class='maintable'>
			<tr>
				<th colspan="5" class="headline">About</th>
			</tr>
			<tr>
				<td colspan="4" class="text">
					SuMPF is a framework for processing and analysing audio data.
					For that it provides classes for recording data with the sound
					card or loading it from a file, classes for mathematical
					operations and classes for plotting the processed data.<br />
					The instances of these classes can be connected through a
					connection system, that automatically updates the data in
					the processing chain when a parameter has changed.<br />
					SuMPF also provides some example programs that show the usage
					of SuMPF. These programs are also meant to be usable as
					standalone programs.<br />
					<br />
					SuMPF is free software, which is licensed under the terms of
					the <a href="http://www.gnu.org/licenses/gpl.html">GNU GPLv3</a>.<br />
					<br />
					SuMPF is written purely in Python. That makes the development
					a lot easier compared to compiled languages. But on the other
					hand it does not have the performance of a compiled program.
					Therefore it does without realtime capabilities.<br />
					This does not mean that SuMPF is slow. Most of the mathematical
					operations are done with NumPy and the graphical interface
					is done with wxPython and matplotlib, so all the intense
					computing is done by compiled programs. SuMPF is not written
					with deliberately slow code either. But everytime when a
					decision has to be made between fast code and numerical precision
					or easy maintainability, the decision is made more in favor
					of the latter two.<br />
					<br />
					Although much of the source code in SuMPF is in the audio
					processing classes, some features of it might be useful in
					other domains than sound processing as well. Especially the
					connection system, the configuration or the methods for the
					threaded use of wxPython can be helpful.
				</td>
				<td class="overview">
					<ul>
						<li><nobr><a href="#Features">Features</a></nobr></li>
						<li><nobr><a href="#Compatibility">Compatibility</a></nobr></li>
					</ul>
				</td>
			</tr>
			<tr>
				<th colspan="5" class="section">
					<a name="Features">Features</a>
					<a href="#top" class="toplink">Top&uarr;</a>
				</th>
			</tr>
			<tr>
				<th colspan="3" class="subsection">Connections</th>
				<td colspan="2" rowspan="2" class="text" style="vertical-align:middle">
					<a href="images/Connectors.png">
						<img src="images/Connectors.png" style="width:100%" />
					</a>
				</td>
			</tr>
			<tr>
				<td colspan="3" class="text">
					A major feature of SuMPF is a <a href="connectors.htm">system
					to connect setter and getter methods</a> of objects to create
					complex processing chains or networks that automatically
					update themselves, if a piece of input data has changed in
					one of the involved objects.<br />
					To enhance methods with the connection functionality, SuMPF
					provides a set of decorators. In most cases, there is nothing
					more to do other than decorating the method to turn it into
					a connector.<br />
					The decorated methods can still be called like usual methods.
					<br />
					<br />
					Apart from the feature of connecting methods, the connection
					system provides two additional features for the decorated
					methods.<br />
					One is the caching for getter methods. The return
					value of a getter method can be saved and calling this getter
					will just return the saved value. Only when a parameter of
					the object, that influences the return value of the getter,
					is changed, the return value is recalculated.<br />
					The other feature is a progress indicator. This is an easy
					and automatic way to update a progress visualization like a
					gauge or a progress dialog about the progress of a calculation
					in a processing network.
				</td>
			</tr>
			<tr>
				<td colspan="2" rowspan="2" class="text">
					<a href="images/Modules.png">
						<img src="images/Modules.png" style="width:100%" />
					</a>
				</td>
				<th colspan="3" class="subsection">Audio processing classes</th>
			</tr>
			<tr>
				<td colspan="3" class="text">
					One main part of SuMPF is the set of
					<a href="moduledoc/sumpf.modules.htm">audio processing classes</a>.
					These classes range from generator classes, that produce reference
					or excitation data, over mathematical operators to plotting
					classes. A sound card interface and classes for file handling
					are also implemented.<br />
					Instances of these classes can be connected with the connections
					system to create complex processing networks for applications
					like audio analysis or sound generation.<br />
					<br />
					SuMPF also implements classes for
					<a href="moduledoc/sumpf.htm">signals and spectrums</a>, which
					are used by the processing classes. Instances of these classes
					can have multiple channels. These channels can be labeled for
					a better overview, which data has come from where.<br />
					The classes implement some basic algebraic operations, so that
					signals or spectrums can be added, subtracted, multiplied and
					divided just like scalar values.
				</td>
			</tr>
			<tr>
				<th colspan="3" class="subsection">Usable example programs</th>
				<td colspan="2" rowspan="2" class="text" style="vertical-align:middle">
					<a href="images/RecordTransferFunction.png">
						<img src="images/RecordTransferFunction.png" style="width:100%" />
					</a>
				</td>
			</tr>
			<tr>
				<td colspan="3" class="text">
					There are some (currently two) example programs, that show of
					the capabilities of SuMPF and hopefully provide some useful
					functionality.<br />
					These programs can be started out of Python source code by
					calling their starting functions in
					<a href="moduledoc/sumpf.examples.htm">sumpf.examples</a> or
					they can be installed as separate programs with the
					<a href="installation.htm#Makefile">makefile</a>.<br />
					The currently available example programs are:
					<ul>
						<li>
							<b>RecordTransferFunction</b><br />
							A graphical application, with which it is possible
							to record the transfer function of a system. It also
							calculates the impulse response from that transfer
							function. The recorded data can then be "cleaned"
							by a set of postprocessing methods.
						</li>
						<li>
							<b>ConvertFile</b><br />
							A command line application, that converts files into
							different file formats. It can also perform a (inverse)
							fourier transform of the data in the file, if a spectrum
							file shall be converted into a signal file or vice versa.
						</li>
					</ul>
				</td>
			</tr>
			<tr>
				<td colspan="2" rowspan="2" class="text">
					<a href="images/Config.png">
						<img src="images/Config.png" style="width:100%" />
					</a>
				</td>
				<th colspan="3" class="subsection">Configuration</th>
			</tr>
			<tr>
				<td colspan="3" class="text">
					SuMPF provides a hierarchical <a href="config.htm">configuration system</a>, that is
					used for the SuMPF framework and can be used in applications
					that use this framework. The configuration parameters for SuMPF
					are accessable from the program as well, so each program can
					configure SuMPF for its individual needs. The configuration 
					hierachy makes sure that two contradicting configurations of
					two programs do not interfere with each other.<br />
					Furthermore the configuration system can be used to easily
					implement a hierarchy of default configuration values, that
					lets programmers, system administrators and users do their
					own configuration for some values, while taking the other
					values from the hierachy level above. A common hierarchy
					looks like the following:
					<ol>
						<li>Hardcoded default values in the program's source code</li>
						<li>A distribution specific configuration with a file somewhere in the program's directory</li>
						<li>A system wide configuration with a file somewhere in /etc</li>
						<li>A user configuration with a file in the user's home directory</li>
						<li>A temporal configuration without a file. This config resets itself to its default values, every time the program starts. It can be saved to or loaded from a file while the program is running.</li>
					</ol>
				</td>
			</tr>
			<tr>
				<th colspan="5" class="section">
					<a name="Compatibility">Compatibility</a>
					<a href="#top" class="toplink">Top&uarr;</a>
				</th>
			</tr>
			<tr>
				<td class="subsection">Python 2</td>
				<td colspan="4" class="text">
					SuMPF is currently being developed with Python 2.7. So this
					version will provide the most features.<br />
					Python 2.6 is not tested, because the unit tests for SuMPF
					make use of some cool functions that have been introduced in
					Python 2.7. But it might work...
				</td>
			</tr>
			<tr>
				<td class="subsection">Python 3</td>
				<td colspan="4" class="text">
					SuMPF is being tested with Python 3 (currently version 3.4).
					These tests include most of the features rely on external
					libraries. But since some of those libraries have not been
					ported to Python 3 yet, not all features are available and
					tested with Python 3.
				</td>
			</tr>
			<tr>
				<td class="subsection">PyPy</td>
				<td colspan="4" class="text">
					SuMPF is being tested with PyPy (currently version 2.2). These
					tests are run without any external libraries, so only a limited
					set of SuMPF's features is tested.
				</td>
			</tr>
			<tr>
				<td class="subsection">Operating Systems</td>
				<td colspan="4" class="text">
					SuMPF is being developed under Debian GNU/Linux. So far it
					has only been tested there. But it is very likely that it
					runs on other GNU/Linux operating systems just as well.<br />
					SuMPF itself does not use any operating system specific
					functions, even the libraries have been picked with portability
					in mind. So it should run on other operating systems like 
					the BSDs, Solaris or MacOS. Some successful tests have shown
					that most features of SuMPF work on Windows XP and Windows 7,
					which suggests that other versions of Microsoft Windows should
					work aswell. But as mentioned before, they are not thoroughly
					tested.<br />
					See a few more details about operating system compatibility
					<a href="installation.htm#OS">here</a>.
				</td>
			</tr>
			<tr>
				<td class="subsection">Other CPU architectures</td>
				<td colspan="4" class="text">
					SuMPF is being developed on a 64bit 686-machine. But since
					SuMPF is written purely in Python, it should run everywhere
					where Python runs too.<br />
					Some external libraries might be more machine dependent, so
					some features might not be available on non-386 architectures.
					But since the libraries have been chosen to be free software
					and available on various operating systems, they should be
					portable without too much effort, if they aren't already ported.
				</td>
			</tr>
			<tr>
				<td></td>
				<td width="33%"></td>
				<td width="34%"></td>
				<td width="33%"></td>
				<td></td>
			</tr>
		</table>
	</body>
</html>

