<html>
	<head>
		<title>SuMPF: Developer's documentation</title>
		<link rel="stylesheet" type="text/css" href="style.css" />
		<script type="text/javascript">
			dont_go_back = true;	// This is needed for the header script at the beginning of the body tag
		</script>
	</head>
	<body>
		<script src="header.js" type="text/javascript"></script>
		<table class="maintable">
			<tr>
				<th colspan="3" class="headline">Developer's documentation</th>
			</tr>
			<tr>
				<td colspan="2" class="text">
					Here is some documentation that is useful for contributors
					to the SuMPF source code.
				</td>
				<td class="overview">
					<ul>
						<li><nobr><a href="#contribute">How to contribute</a></nobr></li>
						<li><nobr><a href="#gitbranches">Git branches</a></nobr></li>
						<li><nobr><a href="#unittests">Unit tests</a></nobr></li>
						<li><nobr><a href="#codingstyle">Coding style</a></nobr></li>
					</ul>
				</td>
			</tr>
			<tr>
				<td colspan="3" class="section">
					<a name="contribute">How to contribute</a>
					<a href="#top" class="toplink">Top&uarr;</a>
				</td>
			</tr>
			<tr>
				<td colspan="3" class="text">
					Well... actually I don't know how this works best. This is
					the first project that I publish and I've never worked with
					GitHub. I will fiddle around with it for a while and as soon
					as I find a way how to manage a project with several developers,
					I will update this documentation.<br />
					Until then it might be the easiest to send me the patches via
					eMail. My mail adress can be found in my git commits (Those
					from Jonas Schulte-Coerne).
				</td>
			</tr>
			<tr>
				<td colspan="3" class="section">
					<a name="gitbranches">Git branches</a>
					<a href="#top" class="toplink">Top&uarr;</a>
				</td>
			</tr>
			<tr>
				<td colspan="3" class="text">
					There are several branches in the git repository. These are
					used to tag the releases and to separate the cutting edge
					features from the more stable ones.
				</td>
			</tr>
			<tr>
				<td class="subsection">master</td>
				<td colspan="2" class="text">
					The latest commit in this branch is always a tagged commit.
					This branch is used to track the releases of SuMPF.
				</td>
			</tr>
			<tr>
				<td class="subsection">current</td>
				<td colspan="2" class="text">
					This branch shall be like a rolling release version of SuMPF.
					It will be merged into "master" from time to time to create
					new releases.
				</td>
			</tr>
			<tr>
				<td class="subsection">next</td>
				<td colspan="2" class="text">
					This branch shall take the commits that are for the next version
					of SuMPF. It tracks the "current" branch.<br />
					Within one version, there shall be no API changes, so any
					commits that change the API or rely on an API change, shall
					go in this branch. The next version of SuMPF will then be
					created by merging this branch into "current".
				</td>
			</tr>
			<tr>
				<td class="subsection">untested</td>
				<td colspan="2" class="text">
					This branch might be created to publish features with insufficient
					documentation or missing unit tests. If no such features exist,
					this branch is deleted from the repository.
				</td>
			</tr>
			<tr>
				<td class="subsection">documentation</td>
				<td colspan="2" class="text">
					This branch tracks the changes from "current" and has some
					patches that help publishing the documentation on GitHub.
					However, it does not contain the automatically generated
					documentation.
				</td>
			</tr>
			<tr>
				<td class="subsection">gh-pages</td>
				<td colspan="2" class="text">
					This branch is needed to publish the documentation in a way
					that it can be accessed on a GitHub website. It tracks the
					"documentation" branch and only adds patches that create or
					update the automatically generated documentation. This way it
					is easy to delete and recreate this branch from time to time
					to avoid that the repository becomes too large, because it
					tracks the history of the automatically generated documentation.
				</td>
			</tr>
			<tr>
				<td colspan="3" class="section">
					<a name="unittests">Unit tests</a>
					<a href="#top" class="toplink">Top&uarr;</a>
				</td>
			</tr>
			<tr>
				<td colspan="3" class="text">
					There is a unit test for almost every line of code in SuMPF.
					Often the easiest way to test a new feature is to write a
					unit test for it and then develop the feature to pass this
					test. Furthermore the large collection of tests are helpful
					to avoid regressions. And last but not least, a unit test can
					be a good example for how to use the tested feature.<br />
					Please write a unit test for every new feature and commit it
					together with the new feature.<br />
					<br />
					The following features are not tested automatically with unit
					tests:
					<ul>
						<li>
							<b>The GUI components</b><br />
							It is hard to test every aspect of a user interface
							with unit tests. Therefore the fully automatic unit
							tests for the GUI are very shallow. They just create
							some windows, change some properties and close the
							windows again.<br />
							To improve the test coverage, the GUI features are
							also tested with interactive tests that ask the user,
							if the GUI shows the expected behavior.
						</li>
						<li>
							<b>The sound card interface</b><br />
							The tests for the sound card interface are also very
							shallow. Maybe this can be changed in the future.
						</li>
						<li>
							<b>The RecordTransferFunction example</b><br />
							There is no unit test for this example since it is
							a program with a graphical user interface that is
							hard to test.
						</li>
					</ul>
					<br />
					The unit tests can be started with the run_tests.py file in
					the tests directory. When these tests are started, the run_tests.py
					script adds the source directory of SuMPF to the PATH environment
					variable, so that it tests the SuMPF version in that directory.
					This only works, if the source and the tests directories are
					in the same parent directory (like they are in the git repository).
					If the directories have been moved, make sure to add the correct
					source path to the PYTHONPATH environment variable, so the
					tests are able to import the version of SuMPF that shall be
					tested.<br />
					An easy way to run the tests is starting them with Eclipse/Pydev.
					To do so, add both the source and the tests folder as Source
					Folder in the project's properties. Starting the tests through
					Eclipse has another great advantage: it is possible to run the
					tests in unit test mode, where each test is run and their results
					are evaluated by Eclipse and it is possible to run the tests
					like a normal Python program.<br />
					In the latter mode, which is the same as running the run_tests.py
					file directly with the Python interpreter, it is possible to
					run the tests twice, while changing configuration values between
					the runs. This helps to find bugs that might be masked by a
					lucky selection of default values in the configuration.<br />
					<br />
					At the top of the run_tests.py file some config options are
					set to specify which tests are skipped. This way tests with
					extraordinary run times can be skipped, so that the ordinary
					test run takes about a second.
				</td>
			</tr>
			<tr>
				<td colspan="3" class="section">
					<a name="codingstyle">Coding style</a>
					<a href="#top" class="toplink">Top&uarr;</a>
				</td>
			</tr>
			<tr>
				<td colspan="3" class="text">
					For the most part the coding style of SuMPF is the same as
					the one presented in the <a href="http://www.python.org/dev/peps/pep-0008/">
					Style Guide for Python Code</a>.<br />
					There are some exceptions though:
					<ul>
						<li>
							Other than presented in the style guide, method names
							are in CamelCase with a capital first letter. This
							is the same style like in the wxPython API.<br />
							Function names are in small letters with an underscore
							as a word delimiter (<span class="code">my_function()</span>).
						</li>
						<li>
							The keyword in docstrings to document return values
							is <span class="code">@retval :</span>. This is because
							Doxygen prefers it over the more common <span class="code">@return :</span>.
						</li>
					</ul>
					<br />
					The following preferences for the Eclipse and PyDev CodeFormatter
					work well with SuMPF:<br />
					(The code example shows some things that should be done differently
					in the source code of SuMPF. The indentation should have been
					done with tabs and the whitespaces after the comment should
					have been trimmed.)
					<img src="images/CodeFormatter.png" style="display:block; margin-left:auto; margin-right:auto;" />
					<br />
					Some of the coding style issues can be tested automatically
					with a unit test. The following list gives an overview about
					what is tested automatically:
					<ul>
						<li>There should be not whitespace characters at a line end. Not even in comments.</li>
						<li>There should be exactly one newline at the file end</li>
						<li>
							There should be one empty line between a class definition and a single block of imports,<br />
							two empty lines between a class definition and multiple blocks of imports or comments and<br />
							three empty lines between a class definition and a function definition or another class definition
						</li>
						<li>The line end character should be the unix type "line feed"</li>
						<li>There should be no comparisons if something is equal or not equal to None. Instead it should be tested, if the variable is None (<span class="code">if variable is None:</span>.)</li>
						<li>There should be no comparisons with booleans. (<span class="code">if variable == True:</span> should be written as <span class="code">if variable:</span>)</li>
						<li>Instead of <span class="code">@return :</span> the docstring keyword <span class="code">@retval :</span> should be used. This is what Doxygen expects.</li>
						<li>There should be no <span class="code">pass</span> in a non empty block</li>
						<li>Paths should be concatenated with <span class="code">os.path.join()</span> instead of <span class="code">+ os.sep +</span></li>
						<li>Every source file should begin with the licence header of the GPLv3.</li>
					</ul>
				</td>
			</tr>
			<tr>
				<td></td>
				<td width="100%"></td>
				<td></td>
			</tr>
		</table>
	</body>
</html>

